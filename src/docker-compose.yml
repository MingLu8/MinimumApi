version: '2'
volumes:
  sqlserver_data:
  mongodb-data:
  mongodb-config:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
  
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  ksqldb-server-connect-test:
    image: confluentinc/ksqldb-server:0.15.0
    hostname: ksqldb-server-connect-test
    container_name: ksqldb-server-connect-test
    ports:
      - 28088:8088
    network_mode: "host"
    environment:
      KSQL_KSQL_SERVICE_ID: "default_"
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: localhost:9092,localhost:29092,localhost:8088,,localhost:28088
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://localhost:8081
      KSQL_KSQL_CONNECT_URL: http://localhost:8083
      
  ksqldb-cli-connect-test:
    image: confluentinc/ksqldb-cli:0.15.0
    container_name: ksqldb-cli-connect-test
    network_mode: "host"
    depends_on:
      - ksqldb-server-connect-test
    entrypoint: /bin/sh
    tty: true

  schema-registry-connect-test:
    image: confluentinc/cp-schema-registry:6.0.1
    container_name: schema-registry-connect-test
    network_mode: "host"
    ports:
      - 28081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: localhost:9092,localhost:29092
    restart: always
    
  kafka-connect-1:
    image: confluentinc/cp-kafka-connect-base:6.0.1
    container_name: kafka-connect-1
    network_mode: "host"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "localhost:9092,localhost:29092"
      CONNECT_REST_PORT: 8082
      CONNECT_GROUP_ID: kafka-connect-test
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs-test
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets-test
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status-test
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://localhost:8081'
      CONNECT_REST_ADVERTISED_HOST_NAME: "localhost"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_PARTITIONS: "25"
      CONNECT_STATUS_STORAGE_PARTITIONS: "5"
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars
    volumes:
      - $PWD/data/connect-jars/:/usr/share/java/kafka-connect-jdbc/jars/
      - $PWD/jmx:/usr/app/
      
  kafka-connect-2:
    image: confluentinc/cp-kafka-connect-base:6.0.1
    container_name: kafka-connect-2
    network_mode: "host"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "localhost:9092,localhost:29092"
      CONNECT_REST_PORT: 8084
      CONNECT_GROUP_ID: kafka-connect-test
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs-test
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets-test
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status-test
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://localhost:8081'
      CONNECT_REST_ADVERTISED_HOST_NAME: "localhost"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_PARTITIONS: "25"
      CONNECT_STATUS_STORAGE_PARTITIONS: "5"
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars
    volumes:
      - $PWD/data/connect-jars/:/usr/share/java/kafka-connect-jdbc/jars/
      - $PWD/jmx:/usr/app/
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: elasticsearch
    environment:
      - node.name=es-node
      - cluster.name=es-cluster
      - discovery.type=single-node
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=MagicWord
     
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - elastic

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.3
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL="http://elasticsearch:9200"
 
    ports: 
      - 5601:5601
    networks: 
      - elastic
    depends_on: 
      - elasticsearch  

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${Sa_Password:-password123}
      - MSSQL_PID=Developer
    ports:
      - 1433:1433
    volumes:
      - sqlserver_data:/var/opt/mssql
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${Sa_Password:-password123} -Q 'SELECT 1' || exit 1"]
      interval: 10s
      retries: 10
      start_period: 10s
      timeout: 3s
  sqlserver.configurator:
    image: mcr.microsoft.com/mssql/server:2019-latest
    volumes:
      - ./init:/docker-entrypoint-initdb.d
    depends_on:
      sqlserver:
        condition: service_healthy
    command: >
      bash -c '
      /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P ${Sa_Password:-password123} -d master -i docker-entrypoint-initdb.d/init.sql;
      echo "All done!";
      '
  mongo:
    image: mongo:latest
    restart: always
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=test
      - MONGO_INITDB_ROOT_PASSWORD=test
      - MONGO_INITDB_DATABASE=admin
    ports:
      - 27017:27017
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
networks:
  elastic:
      driver: bridge